#!/bin/bash
# This script is used to configure and run Consul on a Aliyun ECS.

set -e

# Include general-purpose bash functions from https://github.com/gruntwork-io/bash-commons. Assumes these were installed
# separately from this script, for example, using "cd /opt/gruntwork && git clone https://github.com/gruntwork-io/bash-commons".
source "/opt/gruntwork/bash-commons/assert.sh"
source "/opt/gruntwork/bash-commons/log.sh"
source "/opt/gruntwork/bash-commons/string.sh"

# In bash, we can't distinguish between the empty string, and no value at all, so we create our own unambiguous empty string.
readonly EMPTY_VAL="__EMPTY__"

readonly CONSUL_CONFIG_FILE="default.json"
readonly SUPERVISOR_CONFIG_PATH="/etc/supervisor/conf.d/run-consul.conf"

readonly DEFAULT_RAFT_PROTOCOL="3"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-consul [OPTIONS]"
  echo
  echo "This script is used to configure and run Consul on a Aliyun ECS."
  echo
  echo "Required Arguments:"
  echo
  echo -e "  --server\t\tIf set, run in server mode. Exactly one of --server or --client must be set."
  echo -e "  --client\t\tIf set, run in client mode. Exactly one of --server or --client must be set."
  echo
  echo "Optional Arguments:"
  echo
  echo -e "  --raft-protocol\tThis controls the internal version of the Raft consensus protocol used for server "
  echo -e "                 \tcommunications. Must be set to 3 in order to gain access to Autopilot features, with the"
  echo -e "                 \texception of cleanup_dead_servers. Default: $DEFAULT_RAFT_PROTOCOL"
  echo -e "  --config-dir\t\tThe path to the Consul config folder. Default is the absolute path of '../config', relative to this script."
  echo -e "  --data-dir\t\tThe path to the Consul data folder. Default is the absolute path of '../data', relative to this script."
  echo -e "  --log-dir\t\tThe path to the Consul log folder. Default is the absolute path of '../log', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with Consul binary. Default is the absolute path of the parent folder of this script."
  echo -e "  --user\t\tThe user to run Consul as. Default is to use the owner of --config-dir."
  echo -e "  --skip-consul-config\tIf this flag is set, don't generate a Consul configuration file. Default is false."
  echo -e "  --encrypt-key\t\tConsul encryption key. Default is empty string, which means no encryption key is used."
  echo
  echo "Example:"
  echo
  echo "  run-consul --server  --config-dir /custom/path/to/consul/config"
}

function generate_consul_config {
  local -r server="$1"
  local -r raft_protocol="$2"
  local -r config_dir="$3"
  local -r user="$4"
  local -r encrypt_key="$5"
  local -r config_path="$config_dir/$CONSUL_CONFIG_FILE"

  local instance_ip_address=$(ip addr |grep inet |grep -v inet6 |grep eth0|awk '{print $2}' |awk -F "/" '{print $1}')
  local instance_name=$(hostname)
  local encrypt_key_val=""

  instance_zone="dc1"

  if [[ "$encrypt_key" != "$EMPTY_VAL" ]]; then
    encrypt_key_val="\"encrypt\": \"$encrypt_key\","
  fi

  log_info "Creating default Consul config file in $config_path"
  cat > "$config_path" <<EOF
{
  "advertise_addr": "$instance_ip_address",
  "bind_addr": "$instance_ip_address",
  "bootstrap_expect": 3,
  "client_addr": "0.0.0.0",
  "datacenter": "$instance_zone",
  "node_name": "$instance_name",
  "server": $server,
  "ui": true,
  $encrypt_key_val
  "raft_protocol": $raft_protocol
}
EOF
  chown "$user:$user" "$config_path"
}

function generate_supervisor_config {
  local -r supervisor_config_path="$1"
  local -r consul_config_dir="$2"
  local -r consul_data_dir="$3"
  local -r consul_log_dir="$4"
  local -r consul_bin_dir="$5"
  local -r consul_user="$6"

  local consul_user_home_dir=""
  consul_user_home_dir="$(get_owner_home_dir $consul_user)"

  log_info "Creating Supervisor config file to run Consul in $supervisor_config_path"
  cat > "$supervisor_config_path" <<EOF
[program:consul]
command=$consul_bin_dir/consul agent -config-dir $consul_config_dir -data-dir $consul_data_dir
stdout_logfile=$consul_log_dir/consul-stdout.log
stderr_logfile=$consul_log_dir/consul-error.log
numprocs=1
autostart=true
autorestart=true
stopsignal=INT
user=$consul_user
# Per Supervisord docs (http://supervisord.org/configuration.html), when supervisord runs a process it does not start a
# login shell and does not change environment variables like USER or HOME, so we must pass this in manually.
environment=HOME="$consul_user_home_dir"
EOF
}

function start_consul {
  log_info "Reloading Supervisor config and starting Consul"
  # sudo supervisord -c /etc/supervisor/supervisord.conf
  supervisorctl reread
  supervisorctl update
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local -r path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function get_owner_home_dir {
  local -r user="$1"

  local home_dir=""
  home_dir=$(sudo su - $user -c 'echo $HOME')

  if [[ "$home_dir" == "/" ]]; then
    log_error "No \$HOME directory is set for user $user. This may cause unpredictable behavior with Consul in Aliyun. Exiting."
    exit 1
  fi

  echo "$home_dir"
}

function run {
  local server="false"
  local client="false"
  local raft_protocol="$DEFAULT_RAFT_PROTOCOL"
  local config_dir=""
  local data_dir=""
  local log_dir=""
  local bin_dir=""
  local user=""
  local skip_consul_config="false"
  local encrypt_key="$EMPTY_VAL"
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --server)
        server="true"
        ;;
      --client)
        client="true"
        ;;
      --raft-protocol)
        assert_not_empty "$key" "$2"
        raft_protocol="$2"
        shift
        ;;
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --log-dir)
        assert_not_empty "$key" "$2"
        log_dir="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --encrypt-key)
        encrypt_key="$2"
        shift
        ;;
      --skip-consul-config)
        skip_consul_config="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ ("$server" == "true" && "$client" == "true") || ("$server" == "false" && "$client" == "false") ]]; then
    log_error "Exactly one of --server or --client must be set."
    exit 1
  fi

  assert_is_installed "supervisorctl"
  assert_is_installed "curl"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$data_dir" ]]; then
    data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)
  fi

  if [[ -z "$log_dir" ]]; then
    log_dir=$(cd "$SCRIPT_DIR/../log" && pwd)
  fi

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  if [[ "$skip_consul_config" == "true" ]]; then
    log_info "The --skip-consul-config flag is set, so will not generate a default Consul config file."
  else
    generate_consul_config \
        "$server" \
        "$raft_protocol" \
        "$config_dir" \
        "$user" \
        "$encrypt_key"
  fi

  generate_supervisor_config "$SUPERVISOR_CONFIG_PATH" "$config_dir" "$data_dir" "$log_dir" "$bin_dir" "$user"
  start_consul
}

run "$@"