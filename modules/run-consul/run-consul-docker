#!/bin/bash
# This script is used to configure and run Consul on a Aliyun ECS.

set -e

# In bash, we can't distinguish between the empty string, and no value at all, so we create our own unambiguous empty string.
readonly EMPTY_VAL="__EMPTY__"

readonly CONSUL_CONFIG_FILE="default.json"
readonly SUPERVISOR_CONFIG_PATH="/etc/supervisor/conf.d/run-consul.conf"

readonly DEFAULT_RAFT_PROTOCOL="3"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-consul [OPTIONS]"
  echo
  echo "This script is used to configure and run Consul on a Aliyun ECS."
  echo
  echo "Required Arguments:"
  echo
  echo -e "  --server\t\tIf set, run in server mode. Exactly one of --server or --client must be set."
  echo -e "  --client\t\tIf set, run in client mode. Exactly one of --server or --client must be set."
  echo
  echo "Optional Arguments:"
  echo
  echo -e "  --cluster-tag-name\tAutomatically form a cluster with Instances that have the same value for this Compute Instance tag name."
  echo -e "  --raft-protocol\tThis controls the internal version of the Raft consensus protocol used for server "
  echo -e "                 \tcommunications. Must be set to 3 in order to gain access to Autopilot features, with the"
  echo -e "                 \texception of cleanup_dead_servers. Default: $DEFAULT_RAFT_PROTOCOL"
  echo -e "  --config-dir\t\tThe path to the Consul config folder. Default is the absolute path of '../config', relative to this script."
  echo -e "  --data-dir\t\tThe path to the Consul data folder. Default is the absolute path of '../data', relative to this script."
  echo -e "  --log-dir\t\tThe path to the Consul log folder. Default is the absolute path of '../log', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with Consul binary. Default is the absolute path of the parent folder of this script."
  echo -e "  --user\t\tThe user to run Consul as. Default is to use the owner of --config-dir."
  echo -e "  --skip-consul-config\tIf this flag is set, don't generate a Consul configuration file. Default is false."
  echo -e "  --encrypt-key\t\tConsul encryption key. Default is empty string, which means no encryption key is used."
  echo
  echo "Example:"
  echo
  echo "  run-consul --server --cluster-tag-name consul-xyz --config-dir /custom/path/to/consul/config"
}

function generate_consul_config {
  local -r server="$1"
  local -r raft_protocol="$2"
  local -r config_dir="$3"
  local -r encrypt_key="$4"
  local -r config_path="$config_dir/$CONSUL_CONFIG_FILE"

  local instance_ip_address=$(ip addr |grep inet |grep -v inet6 |grep eth0|awk '{print $2}' |awk -F "/" '{print $1}')
  local instance_name=$(hostname)
  local encrypt_key_val=""

  instance_zone="dc1"

  if [[ "$encrypt_key" != "$EMPTY_VAL" ]]; then
    encrypt_key_val="\"encrypt\": \"$encrypt_key\","
  fi

  echo "Creating default Consul config file in $config_path"
  cat > "$config_path" <<EOF
{
  "advertise_addr": "$instance_ip_address",
  "bind_addr": "$instance_ip_address",
  "bootstrap_expect": 3,
  "client_addr": "0.0.0.0",
  "datacenter": "$instance_zone",
  "node_name": "$instance_name",
  "server": $server,
  "ui": true,
  $encrypt_key_val
  "raft_protocol": $raft_protocol
}
EOF
}

function run {
  local server="false"
  local client="false"
  local raft_protocol="$DEFAULT_RAFT_PROTOCOL"
  local config_dir=""
  local data_dir=""
  local skip_consul_config="false"
  local encrypt_key="$EMPTY_VAL"
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --server)
        server="true"
        ;;
      --client)
        client="true"
        ;;
      --raft-protocol)
        raft_protocol="$2"
        shift
        ;;
      --config-dir)
        config_dir="$2"
        shift
        ;;
      --data-dir)
        data_dir="$2"
        shift
        ;;
      --encrypt-key)
        encrypt_key="$2"
        shift
        ;;
      --skip-consul-config)
        skip_consul_config="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        echo "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ ("$server" == "true" && "$client" == "true") || ("$server" == "false" && "$client" == "false") ]]; then
    log_error "Exactly one of --server or --client must be set."
    exit 1
  fi

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$data_dir" ]]; then
    data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)
  fi

  if [[ "$skip_consul_config" == "true" ]]; then
    log_info "The --skip-consul-config flag is set, so will not generate a default Consul config file."
  else
    generate_consul_config \
        "$server" \
        "$raft_protocol" \
        "$config_dir" \
        "$encrypt_key"
  fi

  consul agent -config-dir $config_dir -data-dir $data_dir
}

run "$@"